# Custom top-level network
networks:
  neo4j-internal:

services:

  server:
    # Docker image to be used
    image: ${NEO4J_DOCKER_IMAGE}

    # Hostname
    hostname: server

    # Service-level network, which specifies the networks, from the list of the top-level networks (in this case only neo4j-internal), that the server will connect to.
    # Adds a network alias (used in neo4j.conf when configuring the discovery members)
    networks:
      neo4j-internal:
        aliases:
          - neo4j-network

    # The ports that will be accessible from outside the container - HTTP (7474) and Bolt (7687).
    ports:
      - "7474:7474"
      - "8080:7687"

    # Uncomment the volumes to be mounted to make them accessible from outside the container.
    volumes:
      - ./data/server:/data
      - ./logs/server:/logs
      - ./import/server:/import
      #- ./metrics/server:/metrics
      #- ./ssl/server:/ssl

    # Passes the following environment variables to the container
    environment:
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=${NEO4J_ACCEPT_LICENSE_AGREEMENT}
      - NEO4J_AUTH=${NEO4J_AUTH}
      - EXTENDED_CONF=${EXTENDED_CONF}
      - NEO4J_EDITION=${NEO4J_EDITION}

    # Simple check testing whether the port 7474 is opened.
    # If so, the instance running inside the container is considered as "healthy".
    # This status can be checked using the "docker ps" command.
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"]

    # Set up the user
    #user: ${USER_ID}:${GROUP_ID}

    restart: unless-stopped
